/* 
		WARNING 
		Auto generated file. 
		Do not modify its contents.
*/

const extend = require('js-base/core/extend');
const FlexLayout = require('sf-core/ui/flexlayout');
const Color = require('sf-core/ui/color');
const ImageView = require('sf-core/ui/imageview');
const Image = require('sf-core/ui/image');
const ImageFillType = require('sf-core/ui/imagefilltype');
const Label = require('sf-core/ui/label');
const TextAlignment = require('sf-core/ui/textalignment');
const Font = require('sf-core/ui/font');



const getCombinedStyle = require("library/styler-builder").getCombinedStyle;

const SliderDrawer = extend(FlexLayout)(
	//constructor
	function(_super, props) {
		// initalizes super class for this component scope
		_super(this, props);

		const flUserInfoStyle = getCombinedStyle(".flexLayout", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			paddingBottom: 10,
			height: 250,
			visible: true,
			width: null,
			alignContent: FlexLayout.AlignContent.STRETCH,
			alignItems: FlexLayout.AlignItems.STRETCH,
			flexDirection: FlexLayout.FlexDirection.COLUMN,
			flexWrap: FlexLayout.FlexWrap.NOWRAP,
			justifyContent: FlexLayout.JustifyContent.FLEX_START,
			positionType: FlexLayout.PositionType.RELATIVE
		});  
		var flUserInfo = new FlexLayout(flUserInfoStyle);  
		this.addChild(flUserInfo);
			
		const flActionsStyle = getCombinedStyle(".flexLayout", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			marginBottom: 0,
			marginTop: 2,
			height: null,
			visible: true,
			width: null,
			alignContent: FlexLayout.AlignContent.STRETCH,
			alignItems: FlexLayout.AlignItems.STRETCH,
			flexDirection: FlexLayout.FlexDirection.COLUMN,
			flexWrap: FlexLayout.FlexWrap.NOWRAP,
			justifyContent: FlexLayout.JustifyContent.FLEX_START,
			positionType: FlexLayout.PositionType.RELATIVE,
			flexGrow: 1
		});  
		var flActions = new FlexLayout(flActionsStyle);  
		this.addChild(flActions);
			
		const flBottomStyle = getCombinedStyle(".flexLayout", {
			height: 72,
			backgroundColor: Color.create(0, 255, 255, 255),
			width: null,
			paddingTop: 28,
			paddingBottom: 20,
			flexDirection: FlexLayout.FlexDirection.ROW
		});  
		var flBottom = new FlexLayout(flBottomStyle);  
		this.addChild(flBottom);
			
		const flHighlightStyle = getCombinedStyle(".flexLayout", {
			width: null,
			left: 10.5,
			right: -21,
			height: 47.42,
			backgroundColor: Color.create(255, 153, 236, 105),
			borderRadius: 23.71,
			top: 17.29,
			positionType: FlexLayout.PositionType.ABSOLUTE
		});  
		var flHighlight = new FlexLayout(flHighlightStyle);  
		flActions.addChild(flHighlight);
		this.flHighlight = flHighlight;
	
		const lineStyle = getCombinedStyle(".flexLayout", {
			backgroundColor: Color.create("#FFFFFF"),
			alpha: 0.7,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			right: 10,
			bottom: 0,
			height: 0.5,
			left: 10,
			visible: true,
			width: null,
			alignContent: FlexLayout.AlignContent.STRETCH,
			alignItems: FlexLayout.AlignItems.STRETCH,
			flexDirection: FlexLayout.FlexDirection.COLUMN,
			flexWrap: FlexLayout.FlexWrap.NOWRAP,
			justifyContent: FlexLayout.JustifyContent.FLEX_START,
			positionType: FlexLayout.PositionType.ABSOLUTE
		});  
		var line = new FlexLayout(lineStyle);  
		flUserInfo.addChild(line);
			
		const flSliderDrawerBottomLineStyle = getCombinedStyle(".flexLayout", {
			backgroundColor: Color.create("#FFFFFF"),
			alpha: 0.7,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			right: 10,
			bottom: null,
			height: 0.5,
			left: 10,
			visible: true,
			width: null,
			top: 0,
			alignContent: FlexLayout.AlignContent.STRETCH,
			alignItems: FlexLayout.AlignItems.STRETCH,
			flexDirection: FlexLayout.FlexDirection.COLUMN,
			flexWrap: FlexLayout.FlexWrap.NOWRAP,
			justifyContent: FlexLayout.JustifyContent.FLEX_START,
			positionType: FlexLayout.PositionType.ABSOLUTE
		});  
		var flSliderDrawerBottomLine = new FlexLayout(flSliderDrawerBottomLineStyle);  
		flBottom.addChild(flSliderDrawerBottomLine);
			
		const flDashboardStyle = getCombinedStyle(".flexLayout", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			marginLeft: 26,
			marginTop: 30,
			height: 22,
			visible: true,
			width: null,
			alignContent: FlexLayout.AlignContent.STRETCH,
			alignItems: FlexLayout.AlignItems.STRETCH,
			flexDirection: FlexLayout.FlexDirection.ROW,
			flexWrap: FlexLayout.FlexWrap.NOWRAP,
			justifyContent: FlexLayout.JustifyContent.FLEX_START,
			positionType: FlexLayout.PositionType.RELATIVE
		});  
		var flDashboard = new FlexLayout(flDashboardStyle);  
		flActions.addChild(flDashboard);
		this.flDashboard = flDashboard;
	
		const flSignoutStyle = getCombinedStyle(".flexLayout", {
			backgroundColor: Color.create(0, 255, 255, 255),
			width: null,
			height: null,
			marginLeft: 26,
			flexGrow: 1,
			flexDirection: FlexLayout.FlexDirection.ROW
		});  
		var flSignout = new FlexLayout(flSignoutStyle);  
		flBottom.addChild(flSignout);
		this.flSignout = flSignout;
	
		const placeholder1Style = getCombinedStyle(".flexLayout", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			height: null,
			visible: true,
			width: null,
			alignContent: FlexLayout.AlignContent.STRETCH,
			alignItems: FlexLayout.AlignItems.STRETCH,
			flexDirection: FlexLayout.FlexDirection.COLUMN,
			flexWrap: FlexLayout.FlexWrap.NOWRAP,
			justifyContent: FlexLayout.JustifyContent.FLEX_START,
			positionType: FlexLayout.PositionType.RELATIVE,
			flexGrow: 2
		});  
		var placeholder1 = new FlexLayout(placeholder1Style);  
		flUserInfo.addChild(placeholder1);
			
		const flCustomersStyle = getCombinedStyle(".flexLayout", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			marginLeft: 26,
			marginTop: 30,
			height: 22,
			visible: true,
			width: null,
			alignContent: FlexLayout.AlignContent.STRETCH,
			alignItems: FlexLayout.AlignItems.STRETCH,
			flexDirection: FlexLayout.FlexDirection.ROW,
			flexWrap: FlexLayout.FlexWrap.NOWRAP,
			justifyContent: FlexLayout.JustifyContent.FLEX_START,
			positionType: FlexLayout.PositionType.RELATIVE
		});  
		var flCustomers = new FlexLayout(flCustomersStyle);  
		flActions.addChild(flCustomers);
		this.flCustomers = flCustomers;
	
		const flVersionStyle = getCombinedStyle(".flexLayout", {
			width: null,
			height: null,
			backgroundColor: Color.create(0, 255, 255, 255),
			paddingRight: 15,
			flexGrow: 1,
			flexDirection: FlexLayout.FlexDirection.ROW_REVERSE
		});  
		var flVersion = new FlexLayout(flVersionStyle);  
		flBottom.addChild(flVersion);
			
		const flUserImageStyle = getCombinedStyle(".flexLayout", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderRadius: 0,
			borderColor: Color.create(255, 255, 255, 255),
			borderWidth: 0,
			height: null,
			visible: true,
			width: null,
			alignContent: FlexLayout.AlignContent.STRETCH,
			alignItems: FlexLayout.AlignItems.CENTER,
			flexDirection: FlexLayout.FlexDirection.COLUMN,
			flexWrap: FlexLayout.FlexWrap.NOWRAP,
			justifyContent: FlexLayout.JustifyContent.CENTER,
			positionType: FlexLayout.PositionType.RELATIVE,
			flexGrow: 3
		});  
		var flUserImage = new FlexLayout(flUserImageStyle);  
		flUserInfo.addChild(flUserImage);
			
		const flUserTextsStyle = getCombinedStyle(".flexLayout", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			paddingBottom: 5,
			paddingTop: 5,
			height: null,
			visible: true,
			width: null,
			alignContent: FlexLayout.AlignContent.STRETCH,
			alignItems: FlexLayout.AlignItems.STRETCH,
			flexDirection: FlexLayout.FlexDirection.COLUMN,
			flexWrap: FlexLayout.FlexWrap.NOWRAP,
			justifyContent: FlexLayout.JustifyContent.SPACE_AROUND,
			positionType: FlexLayout.PositionType.RELATIVE,
			flexGrow: 2
		});  
		var flUserTexts = new FlexLayout(flUserTextsStyle);  
		flUserInfo.addChild(flUserTexts);
			
		const flNotificationsStyle = getCombinedStyle(".flexLayout", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			marginLeft: 26,
			marginTop: 30,
			height: 22,
			visible: true,
			width: null,
			alignContent: FlexLayout.AlignContent.STRETCH,
			alignItems: FlexLayout.AlignItems.STRETCH,
			flexDirection: FlexLayout.FlexDirection.ROW,
			flexWrap: FlexLayout.FlexWrap.NOWRAP,
			justifyContent: FlexLayout.JustifyContent.FLEX_START,
			positionType: FlexLayout.PositionType.RELATIVE
		});  
		var flNotifications = new FlexLayout(flNotificationsStyle);  
		flActions.addChild(flNotifications);
		this.flNotifications = flNotifications;
	
		const flSettingsStyle = getCombinedStyle(".flexLayout", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			marginLeft: 26,
			marginTop: 30,
			height: 22,
			visible: true,
			width: null,
			alignContent: FlexLayout.AlignContent.STRETCH,
			alignItems: FlexLayout.AlignItems.STRETCH,
			flexDirection: FlexLayout.FlexDirection.ROW,
			flexWrap: FlexLayout.FlexWrap.NOWRAP,
			justifyContent: FlexLayout.JustifyContent.FLEX_START,
			positionType: FlexLayout.PositionType.RELATIVE
		});  
		var flSettings = new FlexLayout(flSettingsStyle);  
		flActions.addChild(flSettings);
		this.flSettings = flSettings;
	
		const imgDashboardStyle = getCombinedStyle(".imageView", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			height: 22,
			image: Image.createFromFile("images://sliderdrawer_dashboard.png"),
			imageFillType: ImageFillType.NORMAL,
			visible: true,
			width: 22,
			positionType: FlexLayout.PositionType.RELATIVE
		});  
		var imgDashboard = new ImageView(imgDashboardStyle);  
		flDashboard.addChild(imgDashboard);
		this.imgDashboard = imgDashboard;
	
		const lblVersionStyle = getCombinedStyle(".label", {
			backgroundColor: Color.create(0, 255, 255, 255),
			textAlignment: TextAlignment.MIDRIGHT,
			width: null,
			height: null,
			textColor: Color.create(255, 238, 238, 238),
			text: "v1.0.0",
			flexGrow: 1,
			font: Font.create("Lato", 16, Font.NORMAL)
		});  
		var lblVersion = new Label(lblVersionStyle);  
		if(lblVersionStyle.scrollEnabled === false)
			lblVersion.ios && (lblVersion.ios.scrollEnabled = false);
		flVersion.addChild(lblVersion);
		this.lblVersion = lblVersion;
	
		const imgSignoutStyle = getCombinedStyle(".imageView", {
			width: 38,
			height: null,
			image: Image.createFromFile("images://logout.png")
		});  
		var imgSignout = new ImageView(imgSignoutStyle);  
		flSignout.addChild(imgSignout);
			
		const lblUserNameStyle = getCombinedStyle(".label", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			textAlignment: TextAlignment.MIDCENTER,
			textColor: Color.create(255, 255, 255, 255),
			height: 27,
			text: "<User Name>",
			visible: true,
			width: null,
			positionType: FlexLayout.PositionType.RELATIVE,
			font: Font.create("Lato", 22.5, Font.NORMAL)
		});  
		var lblUserName = new Label(lblUserNameStyle);  
		if(lblUserNameStyle.scrollEnabled === false)
			lblUserName.ios && (lblUserName.ios.scrollEnabled = false);
		flUserTexts.addChild(lblUserName);
		this.lblUserName = lblUserName;
	
		const imgUserPictureStyle = getCombinedStyle(".imageView", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderRadius: 48,
			borderColor: Color.create(255, 255, 255, 255),
			borderWidth: 1,
			height: 96,
			image: Image.createFromFile("images://user_picture_test.png"),
			imageFillType: ImageFillType.ASPECTFIT,
			visible: true,
			width: 96,
			positionType: FlexLayout.PositionType.RELATIVE
		});  
		var imgUserPicture = new ImageView(imgUserPictureStyle);  
		flUserImage.addChild(imgUserPicture);
		this.imgUserPicture = imgUserPicture;
	
		const imgCustomersStyle = getCombinedStyle(".imageView", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			height: 22,
			image: Image.createFromFile("images://sliderdrawer_customer.png"),
			imageFillType: ImageFillType.NORMAL,
			visible: true,
			width: 22,
			positionType: FlexLayout.PositionType.RELATIVE
		});  
		var imgCustomers = new ImageView(imgCustomersStyle);  
		flCustomers.addChild(imgCustomers);
		this.imgCustomers = imgCustomers;
	
		const imgNotificationsStyle = getCombinedStyle(".imageView", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			height: 22,
			image: Image.createFromFile("images://sliderdrawer_notifications_big.png"),
			imageFillType: ImageFillType.NORMAL,
			visible: true,
			width: 22,
			positionType: FlexLayout.PositionType.RELATIVE
		});  
		var imgNotifications = new ImageView(imgNotificationsStyle);  
		flNotifications.addChild(imgNotifications);
			
		const imgSettingsStyle = getCombinedStyle(".imageView", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			height: 22,
			image: Image.createFromFile("images://sliderdrawer_settings.png"),
			imageFillType: ImageFillType.NORMAL,
			visible: true,
			width: 22,
			positionType: FlexLayout.PositionType.RELATIVE
		});  
		var imgSettings = new ImageView(imgSettingsStyle);  
		flSettings.addChild(imgSettings);
		this.imgSettings = imgSettings;
	
		const lblSettingsStyle = getCombinedStyle(".label", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			textAlignment: TextAlignment.MIDLEFT,
			textColor: Color.create(255, 255, 255, 255),
			marginLeft: 16,
			height: null,
			text: "Settings",
			visible: true,
			width: null,
			positionType: FlexLayout.PositionType.RELATIVE,
			flexGrow: 1,
			font: Font.create("Lato", 16, Font.NORMAL)
		});  
		var lblSettings = new Label(lblSettingsStyle);  
		if(lblSettingsStyle.scrollEnabled === false)
			lblSettings.ios && (lblSettings.ios.scrollEnabled = false);
		flSettings.addChild(lblSettings);
		this.lblSettings = lblSettings;
	
		const lblTitleStyle = getCombinedStyle(".label", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderColor: Color.create(255, 255, 255, 255),
			borderWidth: 0,
			textAlignment: TextAlignment.MIDCENTER,
			textColor: Color.create(255, 255, 255, 255),
			height: 17,
			text: "<Title>",
			visible: true,
			width: null,
			positionType: FlexLayout.PositionType.RELATIVE,
			font: Font.create("Lato", 14, Font.NORMAL)
		});  
		var lblTitle = new Label(lblTitleStyle);  
		if(lblTitleStyle.scrollEnabled === false)
			lblTitle.ios && (lblTitle.ios.scrollEnabled = false);
		flUserTexts.addChild(lblTitle);
		this.lblTitle = lblTitle;
	
		const lblNotificationsStyle = getCombinedStyle(".label", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			textAlignment: TextAlignment.MIDLEFT,
			textColor: Color.create(255, 255, 255, 255),
			marginLeft: 16,
			height: null,
			text: "Notifications",
			visible: true,
			width: null,
			positionType: FlexLayout.PositionType.RELATIVE,
			flexGrow: 1,
			font: Font.create("Lato", 16, Font.NORMAL)
		});  
		var lblNotifications = new Label(lblNotificationsStyle);  
		if(lblNotificationsStyle.scrollEnabled === false)
			lblNotifications.ios && (lblNotifications.ios.scrollEnabled = false);
		flNotifications.addChild(lblNotifications);
		this.lblNotifications = lblNotifications;
	
		const lblSignoutStyle = getCombinedStyle(".label", {
			text: "Sign out",
			backgroundColor: Color.create(0, 255, 255, 255),
			textColor: Color.create(255, 255, 255, 255),
			width: null,
			height: null,
			flexGrow: 1,
			font: Font.create("Lato", 16, Font.NORMAL)
		});  
		var lblSignout = new Label(lblSignoutStyle);  
		if(lblSignoutStyle.scrollEnabled === false)
			lblSignout.ios && (lblSignout.ios.scrollEnabled = false);
		flSignout.addChild(lblSignout);
		this.lblSignout = lblSignout;
	
		const lblCustomersStyle = getCombinedStyle(".label", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			textAlignment: TextAlignment.MIDLEFT,
			textColor: Color.create(255, 255, 255, 255),
			marginLeft: 16,
			height: null,
			text: "Customers",
			visible: true,
			width: null,
			positionType: FlexLayout.PositionType.RELATIVE,
			flexGrow: 1,
			font: Font.create("Lato", 16, Font.NORMAL)
		});  
		var lblCustomers = new Label(lblCustomersStyle);  
		if(lblCustomersStyle.scrollEnabled === false)
			lblCustomers.ios && (lblCustomers.ios.scrollEnabled = false);
		flCustomers.addChild(lblCustomers);
		this.lblCustomers = lblCustomers;
	
		const lblDashboardStyle = getCombinedStyle(".label", {
			backgroundColor: Color.create(0, 208, 2, 27),
			alpha: 1,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			textAlignment: TextAlignment.MIDLEFT,
			textColor: Color.create(255, 255, 255, 255),
			marginLeft: 16,
			height: null,
			text: "Dashboard",
			visible: true,
			width: null,
			positionType: FlexLayout.PositionType.RELATIVE,
			flexGrow: 1,
			font: Font.create("Lato", 16, Font.NORMAL)
		});  
		var lblDashboard = new Label(lblDashboardStyle);  
		if(lblDashboardStyle.scrollEnabled === false)
			lblDashboard.ios && (lblDashboard.ios.scrollEnabled = false);
		flDashboard.addChild(lblDashboard);
		this.lblDashboard = lblDashboard;
	
		//assign the children to sliderDrawer 
		this.children = Object.assign({}, {
			flUserInfo: flUserInfo,
			flActions: flActions,
			flBottom: flBottom
		});
		
		//assign the children of flUserInfo
		flUserInfo.children = Object.assign({}, {
			line: line,
			placeholder1: placeholder1,
			flUserImage: flUserImage,
			flUserTexts: flUserTexts
		});
		
		//assign the children of flActions
		flActions.children = Object.assign({}, {
			flHighlight: flHighlight,
			flDashboard: flDashboard,
			flCustomers: flCustomers,
			flNotifications: flNotifications,
			flSettings: flSettings
		});
		
		//assign the children of flBottom
		flBottom.children = Object.assign({}, {
			flSliderDrawerBottomLine: flSliderDrawerBottomLine,
			flSignout: flSignout,
			flVersion: flVersion
		});
		
		//assign the children of flDashboard
		flDashboard.children = Object.assign({}, {
			imgDashboard: imgDashboard,
			lblDashboard: lblDashboard
		});
		
		//assign the children of flSignout
		flSignout.children = Object.assign({}, {
			imgSignout: imgSignout,
			lblSignout: lblSignout
		});
		
		//assign the children of flCustomers
		flCustomers.children = Object.assign({}, {
			imgCustomers: imgCustomers,
			lblCustomers: lblCustomers
		});
		
		//assign the children of flVersion
		flVersion.children = Object.assign({}, {
			lblVersion: lblVersion
		});
		
		//assign the children of flUserImage
		flUserImage.children = Object.assign({}, {
			imgUserPicture: imgUserPicture
		});
		
		//assign the children of flUserTexts
		flUserTexts.children = Object.assign({}, {
			lblUserName: lblUserName,
			lblTitle: lblTitle
		});
		
		//assign the children of flNotifications
		flNotifications.children = Object.assign({}, {
			imgNotifications: imgNotifications,
			lblNotifications: lblNotifications
		});
		
		//assign the children of flSettings
		flSettings.children = Object.assign({}, {
			imgSettings: imgSettings,
			lblSettings: lblSettings
		});
		
	});

SliderDrawer.defaults = getCombinedStyle(".flexLayout", {
	backgroundColor: Color.create(255, 122, 207, 36),
	alpha: 1,
	borderColor: Color.create(255, 255, 255, 255),
	borderWidth: 0,
	height: null,
	visible: true,
	width: null,
	alignContent: FlexLayout.AlignContent.STRETCH,
	alignItems: FlexLayout.AlignItems.STRETCH,
	flexDirection: FlexLayout.FlexDirection.COLUMN,
	flexWrap: FlexLayout.FlexWrap.NOWRAP,
	justifyContent: FlexLayout.JustifyContent.FLEX_START,
	positionType: FlexLayout.PositionType.ABSOLUTE
});

module && (module.exports = SliderDrawer);